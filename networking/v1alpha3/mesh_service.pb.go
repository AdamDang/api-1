// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/mesh_service.proto

package v1alpha3

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Location specifies whether the service is part of Istio mesh or
// outside the mesh.  Location determines the behavior of several
// features, such as service-to-service mTLS authentication, policy
// enforcement, etc. When communicating with services outside the mesh,
// Istio's mTLS authentication is disabled, and policy enforcement is
// performed on the client-side as opposed to server-side.
type MeshService_Location int32

const (
	// Signifies that the service is external to the mesh. Typically used
	// to indicate external services consumed through APIs.
	MeshService_MESH_EXTERNAL MeshService_Location = 0
	// Signifies that the service is part of the mesh. Typically used to
	// indicate services added explicitly as part of expanding the service
	// mesh to include unmanaged infrastructure (e.g., VMs added to a
	// Kubernetes based service mesh).
	MeshService_MESH_INTERNAL MeshService_Location = 1
)

var MeshService_Location_name = map[int32]string{
	0: "MESH_EXTERNAL",
	1: "MESH_INTERNAL",
}
var MeshService_Location_value = map[string]int32{
	"MESH_EXTERNAL": 0,
	"MESH_INTERNAL": 1,
}

func (x MeshService_Location) String() string {
	return proto.EnumName(MeshService_Location_name, int32(x))
}
func (MeshService_Location) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMeshService, []int{0, 0}
}

// Resolution determines how the proxy will resolve the IP addresses of
// the network endpoints associated with the service, so that it can
// route to one of them. The resolution mode specified here has no impact
// on how the application resolves the IP address associated with the
// service. The application may still have to use DNS to resolve the
// service to an IP so that the outbound traffic can be captured by the
// Proxy. Alternatively, for HTTP services, the application could
// directly communicate with the proxy (e.g., by setting HTTP_PROXY) to
// talk to these services.
type MeshService_Resolution int32

const (
	// Assume that incoming connections have already been resolved (to a
	// specific destination IP address). Such connections are typically
	// routed via the proxy using mechanisms such as IP table REDIRECT/
	// eBPF. After performing any routing related transformations, the
	// proxy will forward the connection to the IP address to which the
	// connection was bound.
	MeshService_NONE MeshService_Resolution = 0
	// Use the static IP addresses specified in endpoints (see below) as the
	// backing instances associated with the service.
	MeshService_STATIC MeshService_Resolution = 1
	// Attempt to resolve the IP address by querying the ambient DNS,
	// during request processing. If no endpoints are specified, the proxy
	// will resolve the DNS address specified in the hosts field, if
	// wildcards are not used. If endpoints are specified, the DNS
	// addresses specified in the endpoints will be resolved to determine
	// the destination IP address.  DNS resolution cannot be used with unix
	// domain socket endpoints.
	MeshService_DNS MeshService_Resolution = 2
)

var MeshService_Resolution_name = map[int32]string{
	0: "NONE",
	1: "STATIC",
	2: "DNS",
}
var MeshService_Resolution_value = map[string]int32{
	"NONE":   0,
	"STATIC": 1,
	"DNS":    2,
}

func (x MeshService_Resolution) String() string {
	return proto.EnumName(MeshService_Resolution_name, int32(x))
}
func (MeshService_Resolution) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMeshService, []int{0, 1}
}

// `MeshService` models discovered services in the mesh. A MeshService
// describes the properties of a service (DNS name, VIPs , ports, protocols),
// but does not include the list of endpoints, which is modeled in mesh_endpoint.proto.
// These services could be external to the mesh (e.g., web
// APIs) or could be mesh-internal services that are part of one of the platform's
// service registry .
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: MeshService
// metadata:
//   name: istio-pilot.svc.default.cluster.local
// spec:
//   hosts:
//   - istio-pilot.svc.default.cluster.local
//   addresses:
//   - 10.11.1.1/24 # VIPs
//   ports:
//   - name: grpc-xds
//     number: 15010
//     protocol: TCP
//   - name: http-monitoring
//     number: 9093
//     protocol: TCP
//   location: MESH_INTERNAL
//   resolution: STATIC
// ```
//
type MeshService struct {
	// REQUIRED. The hosts associated with the MeshService. Could be a DNS
	// name with wildcard prefix (external services only). DNS names in hosts
	// will be ignored if the application accesses the service over non-HTTP
	// protocols such as mongo/opaque TCP/even HTTPS. In such scenarios, the
	// IP addresses specified in the Addresses field or the port will be used
	// to uniquely identify the destination.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// The virtual IP addresses associated with the service. Could be CIDR
	// prefix.  For HTTP services, the addresses field will be ignored and
	// the destination will be identified based on the HTTP Host/Authority
	// header. For non-HTTP protocols such as mongo/opaque TCP/even HTTPS,
	// the hosts will be ignored. If one or more IP addresses are specified,
	// the incoming traffic will be identified as belonging to this service
	// if the destination IP matches the IP/CIDRs specified in the addresses
	// field. If the Addresses field is empty, traffic will be identified
	// solely based on the destination port. In such scenarios, the port on
	// which the service is being accessed must not be shared by any other
	// service in the mesh. In other words, the sidecar will behave as a
	// simple TCP proxy, forwarding incoming traffic on a specified port to
	// the specified destination endpoint IP/host. Unix domain socket
	// addresses are not supported in this field.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
	// REQUIRED. The ports associated with the external service. If the
	// Endpoints are unix domain socket addresses, there must be exactly one
	// port.
	Ports []*Port `protobuf:"bytes,3,rep,name=ports" json:"ports,omitempty"`
	// Specify whether the service should be considered external to the mesh
	// or part of the mesh.
	Location MeshService_Location `protobuf:"varint,4,opt,name=location,proto3,enum=istio.networking.v1alpha3.MeshService_Location" json:"location,omitempty"`
	// REQUIRED: Service discovery mode for the hosts. Care must be taken
	// when setting the resolution mode to NONE for a TCP port without
	// accompanying IP addresses. In such cases, traffic to any IP on
	// said port will be allowed (i.e. 0.0.0.0:<port>).
	Resolution MeshService_Resolution `protobuf:"varint,5,opt,name=resolution,proto3,enum=istio.networking.v1alpha3.MeshService_Resolution" json:"resolution,omitempty"`
	// One or more labels associated with the service
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MeshService) Reset()                    { *m = MeshService{} }
func (m *MeshService) String() string            { return proto.CompactTextString(m) }
func (*MeshService) ProtoMessage()               {}
func (*MeshService) Descriptor() ([]byte, []int) { return fileDescriptorMeshService, []int{0} }

func (m *MeshService) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *MeshService) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *MeshService) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *MeshService) GetLocation() MeshService_Location {
	if m != nil {
		return m.Location
	}
	return MeshService_MESH_EXTERNAL
}

func (m *MeshService) GetResolution() MeshService_Resolution {
	if m != nil {
		return m.Resolution
	}
	return MeshService_NONE
}

func (m *MeshService) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MeshService)(nil), "istio.networking.v1alpha3.MeshService")
	proto.RegisterEnum("istio.networking.v1alpha3.MeshService_Location", MeshService_Location_name, MeshService_Location_value)
	proto.RegisterEnum("istio.networking.v1alpha3.MeshService_Resolution", MeshService_Resolution_name, MeshService_Resolution_value)
}
func (m *MeshService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshService) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, s := range m.Hosts {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Ports) > 0 {
		for _, msg := range m.Ports {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMeshService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Location != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeshService(dAtA, i, uint64(m.Location))
	}
	if m.Resolution != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeshService(dAtA, i, uint64(m.Resolution))
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x32
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovMeshService(uint64(len(k))) + 1 + len(v) + sovMeshService(uint64(len(v)))
			i = encodeVarintMeshService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMeshService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintMeshService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintMeshService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MeshService) Size() (n int) {
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, s := range m.Hosts {
			l = len(s)
			n += 1 + l + sovMeshService(uint64(l))
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovMeshService(uint64(l))
		}
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovMeshService(uint64(l))
		}
	}
	if m.Location != 0 {
		n += 1 + sovMeshService(uint64(m.Location))
	}
	if m.Resolution != 0 {
		n += 1 + sovMeshService(uint64(m.Resolution))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshService(uint64(len(k))) + 1 + len(v) + sovMeshService(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshService(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMeshService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeshService(x uint64) (n int) {
	return sovMeshService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeshService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, &Port{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (MeshService_Location(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resolution |= (MeshService_Resolution(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMeshService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeshService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeshService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeshService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeshService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeshService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeshService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeshService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeshService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("networking/v1alpha3/mesh_service.proto", fileDescriptorMeshService) }

var fileDescriptorMeshService = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0xaf, 0xd2, 0x40,
	0x14, 0xc5, 0x99, 0x16, 0x2a, 0x5c, 0xa2, 0xa9, 0x13, 0x17, 0x95, 0x18, 0xac, 0x2c, 0x4c, 0x13,
	0x93, 0x56, 0x20, 0x26, 0xea, 0x0e, 0xb5, 0x89, 0x28, 0x54, 0x9d, 0xb2, 0x30, 0x6e, 0xc8, 0x00,
	0x13, 0xda, 0x50, 0x3b, 0xcd, 0xcc, 0x00, 0xe1, 0x1b, 0xba, 0xf4, 0x23, 0xbc, 0xf0, 0x41, 0x5e,
	0x5e, 0x68, 0xf9, 0xb7, 0xe0, 0xbd, 0xb0, 0xeb, 0x3d, 0xbd, 0xe7, 0x97, 0x73, 0x26, 0x17, 0x5e,
	0xa7, 0x4c, 0xad, 0xb9, 0x58, 0xc4, 0xe9, 0xdc, 0x5b, 0xb5, 0x69, 0x92, 0x45, 0xb4, 0xeb, 0xfd,
	0x65, 0x32, 0x1a, 0x4b, 0x26, 0x56, 0xf1, 0x94, 0xb9, 0x99, 0xe0, 0x8a, 0xe3, 0xe7, 0xb1, 0x54,
	0x31, 0x77, 0x4f, 0xdb, 0xee, 0x61, 0xbb, 0xf1, 0xea, 0x12, 0x62, 0x4e, 0x15, 0x5b, 0xd3, 0x4d,
	0xe1, 0x6e, 0xdd, 0xea, 0x50, 0x1f, 0x32, 0x19, 0x85, 0x05, 0x13, 0x3f, 0x83, 0x4a, 0xc4, 0xa5,
	0x92, 0x16, 0xb2, 0x75, 0xa7, 0x46, 0x8a, 0x01, 0xbf, 0x80, 0x1a, 0x9d, 0xcd, 0x04, 0x93, 0x92,
	0x49, 0x4b, 0xcb, 0xff, 0x9c, 0x04, 0xfc, 0x0e, 0x2a, 0x19, 0x17, 0x4a, 0x5a, 0xba, 0xad, 0x3b,
	0xf5, 0xce, 0x4b, 0xf7, 0xde, 0x44, 0xee, 0x4f, 0x2e, 0x14, 0x29, 0xb6, 0xf1, 0x77, 0xa8, 0x26,
	0x7c, 0x4a, 0x55, 0xcc, 0x53, 0xab, 0x6c, 0x23, 0xe7, 0x49, 0xc7, 0x7b, 0xc0, 0x79, 0x16, 0xd2,
	0x1d, 0xec, 0x6d, 0xe4, 0x08, 0xc0, 0xbf, 0x00, 0x04, 0x93, 0x3c, 0x59, 0xe6, 0xb8, 0x4a, 0x8e,
	0x6b, 0x5f, 0x89, 0x23, 0x47, 0x23, 0x39, 0x83, 0xe0, 0x6f, 0x60, 0x24, 0x74, 0xc2, 0x12, 0x69,
	0x19, 0x79, 0xaf, 0xce, 0xb5, 0xe9, 0x72, 0x93, 0x9f, 0x2a, 0xb1, 0x21, 0x7b, 0x42, 0xe3, 0x03,
	0xd4, 0xcf, 0x64, 0x6c, 0x82, 0xbe, 0x60, 0x1b, 0x0b, 0xd9, 0xc8, 0xa9, 0x91, 0xdd, 0xe7, 0xee,
	0xdd, 0x57, 0x34, 0x59, 0x32, 0x4b, 0xcb, 0xb5, 0x62, 0xf8, 0xa8, 0xbd, 0x47, 0xad, 0xb7, 0x50,
	0x3d, 0xf4, 0xc5, 0x4f, 0xe1, 0xf1, 0xd0, 0x0f, 0xbf, 0x8e, 0xfd, 0xdf, 0x23, 0x9f, 0x04, 0xbd,
	0x81, 0x59, 0x3a, 0x4a, 0xfd, 0x60, 0x2f, 0xa1, 0xd6, 0x1b, 0x80, 0x53, 0x25, 0x5c, 0x85, 0x72,
	0xf0, 0x23, 0xf0, 0xcd, 0x12, 0x06, 0x30, 0xc2, 0x51, 0x6f, 0xd4, 0xff, 0x6c, 0x22, 0xfc, 0x08,
	0xf4, 0x2f, 0x41, 0x68, 0x6a, 0x9f, 0xdc, 0x7f, 0xdb, 0x26, 0xfa, 0xbf, 0x6d, 0xa2, 0x9b, 0x6d,
	0x13, 0xfd, 0xb1, 0x8b, 0x8a, 0x31, 0xf7, 0x68, 0x16, 0x7b, 0x17, 0xce, 0x67, 0x62, 0xe4, 0x77,
	0xd3, 0xbd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xb7, 0x50, 0x2d, 0x9f, 0x02, 0x00, 0x00,
}
