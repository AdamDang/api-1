// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "networking/v1alpha3/gateway.proto";

package istio.networking.v1alpha3;

option go_package = "istio.io/api/networking/v1alpha3";

// `MeshService` models discovered services in the mesh. A MeshService
// describes the properties of a service (DNS name, VIPs , ports, protocols),
// but does not include the list of endpoints, which is modeled in mesh_endpoint.proto.
// These services could be external to the mesh (e.g., web
// APIs) or could be mesh-internal services that are part of one of the platform's
// service registry .
//
// ```yaml
// apiVersion: networking.istio.io/v1alpha3
// kind: MeshService
// metadata:
//   name: istio-pilot.svc.default.cluster.local
// spec:
//   hosts:
//   - istio-pilot.svc.default.cluster.local
//   addresses:
//   - 10.11.1.1/24 # VIPs
//   ports:
//   - name: grpc-xds
//     number: 15010
//     protocol: TCP
//   - name: http-monitoring
//     number: 9093
//     protocol: TCP
//   location: MESH_INTERNAL
//   resolution: STATIC
// ```
//
message MeshService {
  // REQUIRED. The hosts associated with the MeshService. Could be a DNS
  // name with wildcard prefix (external services only). DNS names in hosts
  // will be ignored if the application accesses the service over non-HTTP
  // protocols such as mongo/opaque TCP/even HTTPS. In such scenarios, the
  // IP addresses specified in the Addresses field or the port will be used
  // to uniquely identify the destination.
  repeated string hosts = 1;

  // The virtual IP addresses associated with the service. Could be CIDR
  // prefix.  For HTTP services, the addresses field will be ignored and
  // the destination will be identified based on the HTTP Host/Authority
  // header. For non-HTTP protocols such as mongo/opaque TCP/even HTTPS,
  // the hosts will be ignored. If one or more IP addresses are specified,
  // the incoming traffic will be identified as belonging to this service
  // if the destination IP matches the IP/CIDRs specified in the addresses
  // field. If the Addresses field is empty, traffic will be identified
  // solely based on the destination port. In such scenarios, the port on
  // which the service is being accessed must not be shared by any other
  // service in the mesh. In other words, the sidecar will behave as a
  // simple TCP proxy, forwarding incoming traffic on a specified port to
  // the specified destination endpoint IP/host. Unix domain socket
  // addresses are not supported in this field.
  repeated string addresses = 2;

  // REQUIRED. The ports associated with the external service. If the
  // Endpoints are unix domain socket addresses, there must be exactly one
  // port.
  repeated Port ports = 3;

  // Location specifies whether the service is part of Istio mesh or
  // outside the mesh.  Location determines the behavior of several
  // features, such as service-to-service mTLS authentication, policy
  // enforcement, etc. When communicating with services outside the mesh,
  // Istio's mTLS authentication is disabled, and policy enforcement is
  // performed on the client-side as opposed to server-side.
  enum Location {
    // Signifies that the service is external to the mesh. Typically used
    // to indicate external services consumed through APIs.
    MESH_EXTERNAL = 0;

    // Signifies that the service is part of the mesh. Typically used to
    // indicate services added explicitly as part of expanding the service
    // mesh to include unmanaged infrastructure (e.g., VMs added to a
    // Kubernetes based service mesh).
    MESH_INTERNAL = 1;
  };

  // Specify whether the service should be considered external to the mesh
  // or part of the mesh.
  Location location = 4;

  // Resolution determines how the proxy will resolve the IP addresses of
  // the network endpoints associated with the service, so that it can
  // route to one of them. The resolution mode specified here has no impact
  // on how the application resolves the IP address associated with the
  // service. The application may still have to use DNS to resolve the
  // service to an IP so that the outbound traffic can be captured by the
  // Proxy. Alternatively, for HTTP services, the application could
  // directly communicate with the proxy (e.g., by setting HTTP_PROXY) to
  // talk to these services.
  enum Resolution {
    // Assume that incoming connections have already been resolved (to a
    // specific destination IP address). Such connections are typically
    // routed via the proxy using mechanisms such as IP table REDIRECT/
    // eBPF. After performing any routing related transformations, the
    // proxy will forward the connection to the IP address to which the
    // connection was bound.
    NONE = 0;

    // Use the static IP addresses specified in endpoints (see below) as the
    // backing instances associated with the service.
    STATIC = 1;

    // Attempt to resolve the IP address by querying the ambient DNS,
    // during request processing. If no endpoints are specified, the proxy
    // will resolve the DNS address specified in the hosts field, if
    // wildcards are not used. If endpoints are specified, the DNS
    // addresses specified in the endpoints will be resolved to determine
    // the destination IP address.  DNS resolution cannot be used with unix
    // domain socket endpoints.
    DNS = 2;
  };

  // REQUIRED: Service discovery mode for the hosts. Care must be taken
  // when setting the resolution mode to NONE for a TCP port without
  // accompanying IP addresses. In such cases, traffic to any IP on
  // said port will be allowed (i.e. 0.0.0.0:<port>).
  Resolution resolution = 5;

  // One or more labels associated with the service
  map<string, string> labels = 6;
}
